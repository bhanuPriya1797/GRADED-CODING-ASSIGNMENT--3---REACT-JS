{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react'; // recursion (flat tree structure)\n\nfunction flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = [];\n  arr.push({\n    record: record,\n    indent: indent\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      var tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey);\n      arr.push.apply(arr, _toConsumableArray(tempArr));\n    }\n  }\n  return arr;\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\n\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {\n      var temp = []; // collect flattened record\n\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i];\n        temp.push.apply(temp, _toConsumableArray(flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey)));\n      }\n      return temp;\n    }\n    return data === null || data === void 0 ? void 0 : data.map(function (item) {\n      return {\n        record: item,\n        indent: 0\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}","map":{"version":3,"names":["_toConsumableArray","React","flatRecord","record","indent","childrenColumnName","expandedKeys","getRowKey","arr","push","key","expanded","has","Array","isArray","i","length","tempArr","apply","useFlattenRecords","data","useMemo","size","temp","map","item"],"sources":["F:/Great Learning FSD/React Js/graded-final/repo/node_modules/rc-table/es/hooks/useFlattenRecords.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react'; // recursion (flat tree structure)\n\nfunction flatRecord(record, indent, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = [];\n  arr.push({\n    record: record,\n    indent: indent\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      var tempArr = flatRecord(record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey);\n      arr.push.apply(arr, _toConsumableArray(tempArr));\n    }\n  }\n\n  return arr;\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\n\n\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.size) {\n      var temp = []; // collect flattened record\n\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i];\n        temp.push.apply(temp, _toConsumableArray(flatRecord(record, 0, childrenColumnName, expandedKeys, getRowKey)));\n      }\n\n      return temp;\n    }\n\n    return data === null || data === void 0 ? void 0 : data.map(function (item) {\n      return {\n        record: item,\n        indent: 0\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}"],"mappings":"AAAA,OAAOA,kBAAkB,MAAM,8CAA8C;AAC7E,OAAO,KAAKC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAEhC,SAASC,UAAU,CAACC,MAAM,EAAEC,MAAM,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,EAAE;EAC/E,IAAIC,GAAG,GAAG,EAAE;EACZA,GAAG,CAACC,IAAI,CAAC;IACPN,MAAM,EAAEA,MAAM;IACdC,MAAM,EAAEA;EACV,CAAC,CAAC;EACF,IAAIM,GAAG,GAAGH,SAAS,CAACJ,MAAM,CAAC;EAC3B,IAAIQ,QAAQ,GAAGL,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACM,GAAG,CAACF,GAAG,CAAC;EAEhG,IAAIP,MAAM,IAAIU,KAAK,CAACC,OAAO,CAACX,MAAM,CAACE,kBAAkB,CAAC,CAAC,IAAIM,QAAQ,EAAE;IACnE;IACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACE,kBAAkB,CAAC,CAACW,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC7D,IAAIE,OAAO,GAAGf,UAAU,CAACC,MAAM,CAACE,kBAAkB,CAAC,CAACU,CAAC,CAAC,EAAEX,MAAM,GAAG,CAAC,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,CAAC;MAChHC,GAAG,CAACC,IAAI,CAACS,KAAK,CAACV,GAAG,EAAER,kBAAkB,CAACiB,OAAO,CAAC,CAAC;IAClD;EACF;EAEA,OAAOT,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASW,iBAAiB,CAACC,IAAI,EAAEf,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,EAAE;EAC3F,IAAIC,GAAG,GAAGP,KAAK,CAACoB,OAAO,CAAC,YAAY;IAClC,IAAIf,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACgB,IAAI,EAAE;MACjF,IAAIC,IAAI,GAAG,EAAE,CAAC,CAAC;;MAEf,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIK,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACJ,MAAM,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;QACrF,IAAIZ,MAAM,GAAGiB,IAAI,CAACL,CAAC,CAAC;QACpBQ,IAAI,CAACd,IAAI,CAACS,KAAK,CAACK,IAAI,EAAEvB,kBAAkB,CAACE,UAAU,CAACC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,CAAC,CAAC,CAAC;MAC/G;MAEA,OAAOgB,IAAI;IACb;IAEA,OAAOH,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACI,GAAG,CAAC,UAAUC,IAAI,EAAE;MAC1E,OAAO;QACLtB,MAAM,EAAEsB,IAAI;QACZrB,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACgB,IAAI,EAAEf,kBAAkB,EAAEC,YAAY,EAAEC,SAAS,CAAC,CAAC;EACvD,OAAOC,GAAG;AACZ"},"metadata":{},"sourceType":"module"}