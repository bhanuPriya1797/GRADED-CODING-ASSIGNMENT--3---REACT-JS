{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport omit from \"rc-util/es/omit\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray, fillFieldNames } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'labelRender', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nexport default function generate(config) {\n  var prefixCls = config.prefixCls,\n    optionList = config.optionList;\n  var RefSelect = generateSelector({\n    prefixCls: prefixCls,\n    components: {\n      optionList: optionList\n    },\n    // Not use generate since we will handle ourself\n    convertChildrenToData: function convertChildrenToData() {\n      return null;\n    },\n    flattenOptions: flattenOptions,\n    // Handle `optionLabelProp` in TreeSelect component\n    getLabeledValue: getLabeledValue,\n    filterOptions: filterOptions,\n    isValueDisabled: isValueDisabled,\n    findValueOption: findValueOption,\n    omitDOMProps: function omitDOMProps(props) {\n      return omit(props, OMIT_PROPS);\n    }\n  });\n  RefSelect.displayName = 'Select'; // =================================================================================\n  // =                                      Tree                                     =\n  // =================================================================================\n\n  var RefTreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var fieldNames = props.fieldNames,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n      labelInValue = props.labelInValue,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      children = props.children,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeLine = props.treeLine,\n      treeMotion = props.treeMotion,\n      filterTreeNode = props.filterTreeNode,\n      dropdownPopupAlign = props.dropdownPopupAlign,\n      onChange = props.onChange,\n      onTreeExpand = props.onTreeExpand,\n      onTreeLoad = props.onTreeLoad,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      labelRender = props.labelRender;\n    var mergedCheckable = treeCheckable || treeCheckStrictly;\n    var mergedMultiple = multiple || mergedCheckable;\n    var treeConduction = treeCheckable && !treeCheckStrictly;\n    var mergedLabelInValue = treeCheckStrictly || labelInValue; // ======================= Tree Data =======================\n    // FieldNames\n\n    var mergedFieldNames = fillFieldNames(fieldNames, true); // Legacy both support `label` or `title` if not set.\n    // We have to fallback to function to handle this\n\n    var getTreeNodeTitle = function getTreeNodeTitle(node) {\n      if (!treeData) {\n        return node.title;\n      }\n      if (mergedFieldNames === null || mergedFieldNames === void 0 ? void 0 : mergedFieldNames.label) {\n        return node[mergedFieldNames.label];\n      }\n      return node.label || node.title;\n    };\n    var getTreeNodeLabelProp = function getTreeNodeLabelProp(entity, val) {\n      if (labelRender) {\n        return labelRender(entity, val);\n      } // Skip since entity not exist\n\n      if (!entity) {\n        return undefined;\n      }\n      var node = entity.data.node;\n      if (treeNodeLabelProp) {\n        return node[treeNodeLabelProp];\n      }\n      return getTreeNodeTitle(node);\n    };\n    var mergedTreeData = useTreeData(treeData, children, {\n      getLabelProp: getTreeNodeTitle,\n      simpleMode: treeDataSimpleMode,\n      fieldNames: mergedFieldNames\n    });\n    var flattedOptions = useMemo(function () {\n      return flattenOptions(mergedTreeData);\n    }, [mergedTreeData]);\n    var _useKeyValueMap = useKeyValueMap(flattedOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n    var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n    var _useMemo = useMemo(function () {\n        if (treeConduction) {\n          return convertDataToEntities(mergedTreeData);\n        }\n        return {\n          keyEntities: null\n        };\n      }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n      conductKeyEntities = _useMemo.keyEntities; // ========================== Ref ==========================\n\n    var selectRef = React.useRef(null);\n    React.useImperativeHandle(ref, function () {\n      return {\n        scrollTo: selectRef.current.scrollTo,\n        focus: selectRef.current.focus,\n        blur: selectRef.current.blur,\n        /** @private Internal usage. It's save to remove if `rc-cascader` not use it any longer */\n        getEntityByValue: getEntityByValue\n      };\n    }); // ========================= Value =========================\n\n    var _useMergedState = useMergedState(props.defaultValue, {\n        value: props.value\n      }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n    /** Get `missingRawValues` which not exist in the tree yet */\n\n    var splitRawValues = function splitRawValues(newRawValues) {\n      var missingRawValues = [];\n      var existRawValues = []; // Keep missing value in the cache\n\n      newRawValues.forEach(function (val) {\n        if (getEntityByValue(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues: missingRawValues,\n        existRawValues: existRawValues\n      };\n    };\n    var _useMemo2 = useMemo(function () {\n        var valueHalfCheckedKeys = [];\n        var newRawValues = [];\n        toArray(value).forEach(function (item) {\n          if (item && _typeof(item) === 'object' && 'value' in item) {\n            if (item.halfChecked && treeCheckStrictly) {\n              var entity = getEntityByValue(item.value);\n              valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n            } else {\n              newRawValues.push(item.value);\n            }\n          } else {\n            newRawValues.push(item);\n          }\n        }); // We need do conduction of values\n\n        // We need do conduction of values\n        if (treeConduction) {\n          var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n          var keyList = existRawValues.map(function (val) {\n            return getEntityByValue(val).key;\n          });\n          var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck.checkedKeys,\n            halfCheckedKeys = _conductCheck.halfCheckedKeys;\n          return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n            return getEntityByKey(key).data.value;\n          }))), halfCheckedKeys];\n        }\n        return [newRawValues, valueHalfCheckedKeys];\n      }, [value, flattedOptions, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      rawValues = _useMemo3[0],\n      rawHalfCheckedKeys = _useMemo3[1];\n    var selectValues = useSelectValues(rawValues, {\n      treeConduction: treeConduction,\n      value: value,\n      showCheckedStrategy: showCheckedStrategy,\n      conductKeyEntities: conductKeyEntities,\n      getEntityByValue: getEntityByValue,\n      getEntityByKey: getEntityByKey,\n      getLabelProp: getTreeNodeLabelProp\n    });\n    var triggerChange = function triggerChange(newRawValues, extra, source) {\n      setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n      if (onChange) {\n        var eventValues = newRawValues;\n        if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n          var keyList = newRawValues.map(function (val) {\n            var entity = getEntityByValue(val);\n            return entity ? entity.key : val;\n          });\n          var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n          eventValues = formattedKeyList.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          });\n        }\n        var _ref = extra || {\n            triggerValue: undefined,\n            selected: undefined\n          },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n        var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, value, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n        if (treeCheckStrictly) {\n          var halfValues = rawHalfCheckedKeys.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          }).filter(function (val) {\n            return !eventValues.includes(val);\n          });\n          returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, value, getEntityByValue, getTreeNodeLabelProp)));\n        }\n        var additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: selectValues,\n          triggerValue: triggerValue\n        }; // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n        var showPosition = true;\n        if (treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n        if (mergedCheckable) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n        onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.data.title : null;\n        }), additionalInfo);\n      }\n    };\n    var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n      if (!mergedMultiple) {\n        // Single mode always set value\n        triggerChange([selectValue], {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      } else {\n        var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n        if (treeConduction) {\n          // Should keep missing values\n          var _splitRawValues2 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues2.missingRawValues,\n            existRawValues = _splitRawValues2.existRawValues;\n          var keyList = existRawValues.map(function (val) {\n            return getEntityByValue(val).key;\n          });\n          var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck2.checkedKeys;\n          newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n            return getEntityByKey(key).data.value;\n          })));\n        }\n        triggerChange(newRawValues, {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      }\n      if (onSelect) {\n        onSelect(eventValue, option);\n      }\n    };\n    var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n      var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n      if (treeConduction) {\n        var _splitRawValues3 = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues3.missingRawValues,\n          existRawValues = _splitRawValues3.existRawValues;\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n        var _conductCheck3 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedKeys\n          }, conductKeyEntities),\n          checkedKeys = _conductCheck3.checkedKeys;\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n      triggerChange(newRawValues, {\n        selected: false,\n        triggerValue: selectValue\n      }, source);\n      if (onDeselect) {\n        onDeselect(eventValue, option);\n      }\n    };\n    var onInternalClear = function onInternalClear() {\n      triggerChange([], null, 'clear');\n    }; // ========================= Open ==========================\n\n    var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n      if (onDropdownVisibleChange) {\n        var legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get: function get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        onDropdownVisibleChange(open, legacyParam);\n      }\n    }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n    if (process.env.NODE_ENV !== 'production') {\n      warningProps(props);\n    } // ======================== Render =========================\n    // We pass some props into select props style\n\n    var selectProps = {\n      optionLabelProp: null,\n      optionFilterProp: treeNodeFilterProp,\n      dropdownAlign: dropdownPopupAlign,\n      internalProps: {\n        mark: INTERNAL_PROPS_MARK,\n        onClear: onInternalClear,\n        skipTriggerChange: true,\n        skipTriggerSelect: true,\n        onRawSelect: onInternalSelect,\n        onRawDeselect: onInternalDeselect\n      }\n    };\n    if ('filterTreeNode' in props) {\n      selectProps.filterOption = filterTreeNode;\n    }\n    var selectContext = React.useMemo(function () {\n      return {\n        checkable: mergedCheckable,\n        loadData: loadData,\n        treeLoadedKeys: treeLoadedKeys,\n        onTreeLoad: onTreeLoad,\n        checkedKeys: rawValues,\n        halfCheckedKeys: rawHalfCheckedKeys,\n        treeDefaultExpandAll: treeDefaultExpandAll,\n        treeExpandedKeys: treeExpandedKeys,\n        treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n        onTreeExpand: onTreeExpand,\n        treeIcon: treeIcon,\n        treeMotion: treeMotion,\n        showTreeIcon: showTreeIcon,\n        switcherIcon: switcherIcon,\n        treeLine: treeLine,\n        treeNodeFilterProp: treeNodeFilterProp,\n        getEntityByKey: getEntityByKey,\n        getEntityByValue: getEntityByValue\n      };\n    }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawValues, rawHalfCheckedKeys, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, getEntityByKey, getEntityByValue]);\n    return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n      value: selectContext\n    }, /*#__PURE__*/React.createElement(RefSelect, _extends({\n      ref: selectRef,\n      mode: mergedMultiple ? 'multiple' : null\n    }, props, selectProps, {\n      value: selectValues // We will handle this ourself since we need calculate conduction\n      ,\n\n      labelInValue: true,\n      options: mergedTreeData,\n      onChange: null,\n      onSelect: null,\n      onDeselect: null,\n      onDropdownVisibleChange: onInternalDropdownVisibleChange\n    })));\n  });\n  RefTreeSelect.displayName = 'TreeSelect'; // =================================================================================\n  // =                                    Generic                                    =\n  // =================================================================================\n\n  var TreeSelect = RefTreeSelect;\n  TreeSelect.TreeNode = TreeNode;\n  TreeSelect.SHOW_ALL = SHOW_ALL;\n  TreeSelect.SHOW_PARENT = SHOW_PARENT;\n  TreeSelect.SHOW_CHILD = SHOW_CHILD;\n  return TreeSelect;\n}","map":{"version":3,"names":["_extends","_toConsumableArray","_typeof","_slicedToArray","React","useMemo","generateSelector","getLabeledValue","convertDataToEntities","conductCheck","omit","INTERNAL_PROPS_MARK","useMergedState","warning","TreeNode","flattenOptions","filterOptions","isValueDisabled","findValueOption","addValue","removeValue","getRawValueLabeled","toArray","fillFieldNames","warningProps","SelectContext","useTreeData","useKeyValueMap","useKeyValueMapping","formatStrategyKeys","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","fillAdditionalInfo","useSelectValues","OMIT_PROPS","generate","config","prefixCls","optionList","RefSelect","components","convertChildrenToData","omitDOMProps","props","displayName","RefTreeSelect","forwardRef","ref","fieldNames","multiple","treeCheckable","treeCheckStrictly","_props$showCheckedStr","showCheckedStrategy","labelInValue","loadData","treeLoadedKeys","_props$treeNodeFilter","treeNodeFilterProp","treeNodeLabelProp","treeDataSimpleMode","treeData","treeExpandedKeys","treeDefaultExpandedKeys","treeDefaultExpandAll","children","treeIcon","showTreeIcon","switcherIcon","treeLine","treeMotion","filterTreeNode","dropdownPopupAlign","onChange","onTreeExpand","onTreeLoad","onDropdownVisibleChange","onSelect","onDeselect","labelRender","mergedCheckable","mergedMultiple","treeConduction","mergedLabelInValue","mergedFieldNames","getTreeNodeTitle","node","title","label","getTreeNodeLabelProp","entity","val","undefined","data","mergedTreeData","getLabelProp","simpleMode","flattedOptions","_useKeyValueMap","_useKeyValueMap2","cacheKeyMap","cacheValueMap","_useKeyValueMapping","_useKeyValueMapping2","getEntityByKey","getEntityByValue","_useMemo","keyEntities","conductKeyEntities","selectRef","useRef","useImperativeHandle","scrollTo","current","focus","blur","_useMergedState","defaultValue","value","_useMergedState2","setValue","splitRawValues","newRawValues","missingRawValues","existRawValues","forEach","push","_useMemo2","valueHalfCheckedKeys","item","halfChecked","key","_splitRawValues","keyList","map","_conductCheck","checkedKeys","halfCheckedKeys","concat","_useMemo3","rawValues","rawHalfCheckedKeys","selectValues","triggerChange","extra","source","eventValues","formattedKeyList","_ref","triggerValue","selected","returnValues","halfValues","filter","includes","additionalInfo","preValue","showPosition","checked","onInternalSelect","selectValue","option","eventValue","_splitRawValues2","_conductCheck2","onInternalDeselect","_splitRawValues3","_conductCheck3","onInternalClear","onInternalDropdownVisibleChange","useCallback","open","legacyParam","Object","defineProperty","get","process","env","NODE_ENV","selectProps","optionLabelProp","optionFilterProp","dropdownAlign","internalProps","mark","onClear","skipTriggerChange","skipTriggerSelect","onRawSelect","onRawDeselect","filterOption","selectContext","checkable","createElement","Provider","mode","options","TreeSelect"],"sources":["F:/Great Learning FSD/React Js/graded-final/repo/node_modules/rc-tree-select/es/generate.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport omit from \"rc-util/es/omit\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray, fillFieldNames } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'labelRender', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nexport default function generate(config) {\n  var prefixCls = config.prefixCls,\n      optionList = config.optionList;\n  var RefSelect = generateSelector({\n    prefixCls: prefixCls,\n    components: {\n      optionList: optionList\n    },\n    // Not use generate since we will handle ourself\n    convertChildrenToData: function convertChildrenToData() {\n      return null;\n    },\n    flattenOptions: flattenOptions,\n    // Handle `optionLabelProp` in TreeSelect component\n    getLabeledValue: getLabeledValue,\n    filterOptions: filterOptions,\n    isValueDisabled: isValueDisabled,\n    findValueOption: findValueOption,\n    omitDOMProps: function omitDOMProps(props) {\n      return omit(props, OMIT_PROPS);\n    }\n  });\n  RefSelect.displayName = 'Select'; // =================================================================================\n  // =                                      Tree                                     =\n  // =================================================================================\n\n  var RefTreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    var fieldNames = props.fieldNames,\n        multiple = props.multiple,\n        treeCheckable = props.treeCheckable,\n        treeCheckStrictly = props.treeCheckStrictly,\n        _props$showCheckedStr = props.showCheckedStrategy,\n        showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n        labelInValue = props.labelInValue,\n        loadData = props.loadData,\n        treeLoadedKeys = props.treeLoadedKeys,\n        _props$treeNodeFilter = props.treeNodeFilterProp,\n        treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n        treeNodeLabelProp = props.treeNodeLabelProp,\n        treeDataSimpleMode = props.treeDataSimpleMode,\n        treeData = props.treeData,\n        treeExpandedKeys = props.treeExpandedKeys,\n        treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n        treeDefaultExpandAll = props.treeDefaultExpandAll,\n        children = props.children,\n        treeIcon = props.treeIcon,\n        showTreeIcon = props.showTreeIcon,\n        switcherIcon = props.switcherIcon,\n        treeLine = props.treeLine,\n        treeMotion = props.treeMotion,\n        filterTreeNode = props.filterTreeNode,\n        dropdownPopupAlign = props.dropdownPopupAlign,\n        onChange = props.onChange,\n        onTreeExpand = props.onTreeExpand,\n        onTreeLoad = props.onTreeLoad,\n        onDropdownVisibleChange = props.onDropdownVisibleChange,\n        onSelect = props.onSelect,\n        onDeselect = props.onDeselect,\n        labelRender = props.labelRender;\n    var mergedCheckable = treeCheckable || treeCheckStrictly;\n    var mergedMultiple = multiple || mergedCheckable;\n    var treeConduction = treeCheckable && !treeCheckStrictly;\n    var mergedLabelInValue = treeCheckStrictly || labelInValue; // ======================= Tree Data =======================\n    // FieldNames\n\n    var mergedFieldNames = fillFieldNames(fieldNames, true); // Legacy both support `label` or `title` if not set.\n    // We have to fallback to function to handle this\n\n    var getTreeNodeTitle = function getTreeNodeTitle(node) {\n      if (!treeData) {\n        return node.title;\n      }\n\n      if (mergedFieldNames === null || mergedFieldNames === void 0 ? void 0 : mergedFieldNames.label) {\n        return node[mergedFieldNames.label];\n      }\n\n      return node.label || node.title;\n    };\n\n    var getTreeNodeLabelProp = function getTreeNodeLabelProp(entity, val) {\n      if (labelRender) {\n        return labelRender(entity, val);\n      } // Skip since entity not exist\n\n\n      if (!entity) {\n        return undefined;\n      }\n\n      var node = entity.data.node;\n\n      if (treeNodeLabelProp) {\n        return node[treeNodeLabelProp];\n      }\n\n      return getTreeNodeTitle(node);\n    };\n\n    var mergedTreeData = useTreeData(treeData, children, {\n      getLabelProp: getTreeNodeTitle,\n      simpleMode: treeDataSimpleMode,\n      fieldNames: mergedFieldNames\n    });\n    var flattedOptions = useMemo(function () {\n      return flattenOptions(mergedTreeData);\n    }, [mergedTreeData]);\n\n    var _useKeyValueMap = useKeyValueMap(flattedOptions),\n        _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n        cacheKeyMap = _useKeyValueMap2[0],\n        cacheValueMap = _useKeyValueMap2[1];\n\n    var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n        _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n        getEntityByKey = _useKeyValueMapping2[0],\n        getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n    var _useMemo = useMemo(function () {\n      if (treeConduction) {\n        return convertDataToEntities(mergedTreeData);\n      }\n\n      return {\n        keyEntities: null\n      };\n    }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n        conductKeyEntities = _useMemo.keyEntities; // ========================== Ref ==========================\n\n\n    var selectRef = React.useRef(null);\n    React.useImperativeHandle(ref, function () {\n      return {\n        scrollTo: selectRef.current.scrollTo,\n        focus: selectRef.current.focus,\n        blur: selectRef.current.blur,\n\n        /** @private Internal usage. It's save to remove if `rc-cascader` not use it any longer */\n        getEntityByValue: getEntityByValue\n      };\n    }); // ========================= Value =========================\n\n    var _useMergedState = useMergedState(props.defaultValue, {\n      value: props.value\n    }),\n        _useMergedState2 = _slicedToArray(_useMergedState, 2),\n        value = _useMergedState2[0],\n        setValue = _useMergedState2[1];\n    /** Get `missingRawValues` which not exist in the tree yet */\n\n\n    var splitRawValues = function splitRawValues(newRawValues) {\n      var missingRawValues = [];\n      var existRawValues = []; // Keep missing value in the cache\n\n      newRawValues.forEach(function (val) {\n        if (getEntityByValue(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues: missingRawValues,\n        existRawValues: existRawValues\n      };\n    };\n\n    var _useMemo2 = useMemo(function () {\n      var valueHalfCheckedKeys = [];\n      var newRawValues = [];\n      toArray(value).forEach(function (item) {\n        if (item && _typeof(item) === 'object' && 'value' in item) {\n          if (item.halfChecked && treeCheckStrictly) {\n            var entity = getEntityByValue(item.value);\n            valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n          } else {\n            newRawValues.push(item.value);\n          }\n        } else {\n          newRawValues.push(item);\n        }\n      }); // We need do conduction of values\n\n      // We need do conduction of values\n      if (treeConduction) {\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck.checkedKeys,\n            halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        }))), halfCheckedKeys];\n      }\n\n      return [newRawValues, valueHalfCheckedKeys];\n    }, [value, flattedOptions, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n        _useMemo3 = _slicedToArray(_useMemo2, 2),\n        rawValues = _useMemo3[0],\n        rawHalfCheckedKeys = _useMemo3[1];\n\n    var selectValues = useSelectValues(rawValues, {\n      treeConduction: treeConduction,\n      value: value,\n      showCheckedStrategy: showCheckedStrategy,\n      conductKeyEntities: conductKeyEntities,\n      getEntityByValue: getEntityByValue,\n      getEntityByKey: getEntityByKey,\n      getLabelProp: getTreeNodeLabelProp\n    });\n\n    var triggerChange = function triggerChange(newRawValues, extra, source) {\n      setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n      if (onChange) {\n        var eventValues = newRawValues;\n\n        if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n          var keyList = newRawValues.map(function (val) {\n            var entity = getEntityByValue(val);\n            return entity ? entity.key : val;\n          });\n          var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n          eventValues = formattedKeyList.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          });\n        }\n\n        var _ref = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        },\n            triggerValue = _ref.triggerValue,\n            selected = _ref.selected;\n\n        var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, value, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n        if (treeCheckStrictly) {\n          var halfValues = rawHalfCheckedKeys.map(function (key) {\n            var entity = getEntityByKey(key);\n            return entity ? entity.data.value : key;\n          }).filter(function (val) {\n            return !eventValues.includes(val);\n          });\n          returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, value, getEntityByValue, getTreeNodeLabelProp)));\n        }\n\n        var additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: selectValues,\n          triggerValue: triggerValue\n        }; // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n        var showPosition = true;\n\n        if (treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n        if (mergedCheckable) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n\n        onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.data.title : null;\n        }), additionalInfo);\n      }\n    };\n\n    var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n      if (!mergedMultiple) {\n        // Single mode always set value\n        triggerChange([selectValue], {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      } else {\n        var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n        if (treeConduction) {\n          // Should keep missing values\n          var _splitRawValues2 = splitRawValues(newRawValues),\n              missingRawValues = _splitRawValues2.missingRawValues,\n              existRawValues = _splitRawValues2.existRawValues;\n\n          var keyList = existRawValues.map(function (val) {\n            return getEntityByValue(val).key;\n          });\n\n          var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n              checkedKeys = _conductCheck2.checkedKeys;\n\n          newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n            return getEntityByKey(key).data.value;\n          })));\n        }\n\n        triggerChange(newRawValues, {\n          selected: true,\n          triggerValue: selectValue\n        }, source);\n      }\n\n      if (onSelect) {\n        onSelect(eventValue, option);\n      }\n    };\n\n    var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n      var eventValue = mergedLabelInValue ? selectValue : selectValue;\n      var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n      if (treeConduction) {\n        var _splitRawValues3 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues3.missingRawValues,\n            existRawValues = _splitRawValues3.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck3 = conductCheck(keyList, {\n          checked: false,\n          halfCheckedKeys: rawHalfCheckedKeys\n        }, conductKeyEntities),\n            checkedKeys = _conductCheck3.checkedKeys;\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: false,\n        triggerValue: selectValue\n      }, source);\n\n      if (onDeselect) {\n        onDeselect(eventValue, option);\n      }\n    };\n\n    var onInternalClear = function onInternalClear() {\n      triggerChange([], null, 'clear');\n    }; // ========================= Open ==========================\n\n\n    var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n      if (onDropdownVisibleChange) {\n        var legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get: function get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        onDropdownVisibleChange(open, legacyParam);\n      }\n    }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n    if (process.env.NODE_ENV !== 'production') {\n      warningProps(props);\n    } // ======================== Render =========================\n    // We pass some props into select props style\n\n\n    var selectProps = {\n      optionLabelProp: null,\n      optionFilterProp: treeNodeFilterProp,\n      dropdownAlign: dropdownPopupAlign,\n      internalProps: {\n        mark: INTERNAL_PROPS_MARK,\n        onClear: onInternalClear,\n        skipTriggerChange: true,\n        skipTriggerSelect: true,\n        onRawSelect: onInternalSelect,\n        onRawDeselect: onInternalDeselect\n      }\n    };\n\n    if ('filterTreeNode' in props) {\n      selectProps.filterOption = filterTreeNode;\n    }\n\n    var selectContext = React.useMemo(function () {\n      return {\n        checkable: mergedCheckable,\n        loadData: loadData,\n        treeLoadedKeys: treeLoadedKeys,\n        onTreeLoad: onTreeLoad,\n        checkedKeys: rawValues,\n        halfCheckedKeys: rawHalfCheckedKeys,\n        treeDefaultExpandAll: treeDefaultExpandAll,\n        treeExpandedKeys: treeExpandedKeys,\n        treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n        onTreeExpand: onTreeExpand,\n        treeIcon: treeIcon,\n        treeMotion: treeMotion,\n        showTreeIcon: showTreeIcon,\n        switcherIcon: switcherIcon,\n        treeLine: treeLine,\n        treeNodeFilterProp: treeNodeFilterProp,\n        getEntityByKey: getEntityByKey,\n        getEntityByValue: getEntityByValue\n      };\n    }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawValues, rawHalfCheckedKeys, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, getEntityByKey, getEntityByValue]);\n    return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n      value: selectContext\n    }, /*#__PURE__*/React.createElement(RefSelect, _extends({\n      ref: selectRef,\n      mode: mergedMultiple ? 'multiple' : null\n    }, props, selectProps, {\n      value: selectValues // We will handle this ourself since we need calculate conduction\n      ,\n      labelInValue: true,\n      options: mergedTreeData,\n      onChange: null,\n      onSelect: null,\n      onDeselect: null,\n      onDropdownVisibleChange: onInternalDropdownVisibleChange\n    })));\n  });\n  RefTreeSelect.displayName = 'TreeSelect'; // =================================================================================\n  // =                                    Generic                                    =\n  // =================================================================================\n\n  var TreeSelect = RefTreeSelect;\n  TreeSelect.TreeNode = TreeNode;\n  TreeSelect.SHOW_ALL = SHOW_ALL;\n  TreeSelect.SHOW_PARENT = SHOW_PARENT;\n  TreeSelect.SHOW_CHILD = SHOW_CHILD;\n  return TreeSelect;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}