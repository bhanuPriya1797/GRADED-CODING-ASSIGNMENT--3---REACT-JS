{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable default-case */\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { SelectContext } from \"rc-tree-select/es/Context\";\nimport Column from './Column';\nimport { isLeaf, restoreCompatibleValue } from '../util';\nimport CascaderContext from '../context';\nimport useSearchResult from '../hooks/useSearchResult';\nvar RefOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _optionColumns$$optio, _classNames;\n  var prefixCls = props.prefixCls,\n    options = props.options,\n    onSelect = props.onSelect,\n    multiple = props.multiple,\n    open = props.open,\n    flattenOptions = props.flattenOptions,\n    searchValue = props.searchValue,\n    onToggleOpen = props.onToggleOpen,\n    notFoundContent = props.notFoundContent,\n    direction = props.direction;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n  var _React$useContext = React.useContext(SelectContext),\n    checkedKeys = _React$useContext.checkedKeys,\n    halfCheckedKeys = _React$useContext.halfCheckedKeys;\n  var _React$useContext2 = React.useContext(CascaderContext),\n    changeOnSelect = _React$useContext2.changeOnSelect,\n    expandTrigger = _React$useContext2.expandTrigger,\n    fieldNames = _React$useContext2.fieldNames,\n    loadData = _React$useContext2.loadData,\n    search = _React$useContext2.search,\n    dropdownPrefixCls = _React$useContext2.dropdownPrefixCls;\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loadingKeys = _React$useState2[0],\n    setLoadingKeys = _React$useState2[1];\n  var internalLoadData = function internalLoadData(pathValue) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === pathValue;\n    });\n    if (entity && !isLeaf(entity.data.node)) {\n      var _restoreCompatibleVal = restoreCompatibleValue(entity, fieldNames),\n        optionList = _restoreCompatibleVal.options;\n      var rawOptionList = optionList.map(function (opt) {\n        return opt.node;\n      });\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [entity.key]);\n      });\n      loadData(rawOptionList);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var option = flattenOptions.find(function (opt) {\n          return opt.value === loadingKey;\n        });\n        if (!option || option.data.children || option.data.isLeaf === true) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [flattenOptions, loadingKeys]); // ========================== Values ==========================\n\n  var checkedSet = React.useMemo(function () {\n    return new Set(checkedKeys);\n  }, [checkedKeys]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(halfCheckedKeys);\n  }, [halfCheckedKeys]); // =========================== Open ===========================\n\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    openFinalValue = _React$useState4[0],\n    setOpenFinalValue = _React$useState4[1];\n  var mergedOpenPath = React.useMemo(function () {\n    if (searchValue) {\n      return openFinalValue !== undefined && openFinalValue !== null ? [openFinalValue] : [];\n    }\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === openFinalValue;\n    });\n    if (entity) {\n      var _restoreCompatibleVal2 = restoreCompatibleValue(entity, fieldNames),\n        path = _restoreCompatibleVal2.path;\n      return path;\n    }\n    return [];\n  }, [openFinalValue, flattenOptions, searchValue]);\n  React.useEffect(function () {\n    if (open) {\n      var nextOpenPath = null;\n      if (!multiple && checkedKeys.length) {\n        var entity = flattenOptions.find(function (flattenOption) {\n          return flattenOption.data.value === checkedKeys[0];\n        });\n        if (entity) {\n          nextOpenPath = entity.data.value;\n        }\n      }\n      setOpenFinalValue(nextOpenPath);\n    }\n  }, [open]); // =========================== Path ===========================\n\n  var onPathOpen = function onPathOpen(index, pathValue) {\n    setOpenFinalValue(pathValue); // Trigger loadData\n\n    internalLoadData(pathValue);\n  };\n  var onPathSelect = function onPathSelect(pathValue, leaf) {\n    onSelect(pathValue, {\n      selected: !checkedSet.has(pathValue)\n    });\n    if (!multiple && (leaf || changeOnSelect && expandTrigger === 'hover')) {\n      onToggleOpen(false);\n    }\n  };\n  var getPathList = function getPathList(pathList) {\n    var currentOptions = options;\n    var _loop = function _loop(i) {\n      currentOptions = (currentOptions || []).find(function (option) {\n        return option.value === pathList[i];\n      }).children;\n    };\n    for (var i = 0; i < pathList.length; i += 1) {\n      _loop(i);\n    }\n    return currentOptions;\n  }; // ========================== Search ==========================\n\n  var searchOptions = useSearchResult(_objectSpread(_objectSpread({}, props), {}, {\n    prefixCls: mergedPrefixCls,\n    fieldNames: fieldNames,\n    changeOnSelect: changeOnSelect,\n    searchConfig: search\n  })); // ========================== Column ==========================\n\n  var optionColumns = React.useMemo(function () {\n    if (searchValue) {\n      return [{\n        options: searchOptions\n      }];\n    }\n    var rawOptionColumns = [];\n    for (var i = 0; i <= mergedOpenPath.length; i += 1) {\n      var subOptions = getPathList(mergedOpenPath.slice(0, i));\n      if (subOptions) {\n        rawOptionColumns.push({\n          options: subOptions\n        });\n      } else {\n        break;\n      }\n    }\n    return rawOptionColumns;\n  }, [searchValue, searchOptions, mergedOpenPath]); // ========================= Keyboard =========================\n\n  var getActiveOption = function getActiveOption(activeColumnIndex, offset) {\n    var _optionColumns$active;\n    var pathActiveValue = mergedOpenPath[activeColumnIndex];\n    var currentOptions = ((_optionColumns$active = optionColumns[activeColumnIndex]) === null || _optionColumns$active === void 0 ? void 0 : _optionColumns$active.options) || [];\n    var activeOptionIndex = currentOptions.findIndex(function (opt) {\n      return opt.value === pathActiveValue;\n    });\n    var len = currentOptions.length; // Last one is special since -1 may back 2 offset\n\n    if (offset === -1 && activeOptionIndex === -1) {\n      activeOptionIndex = len;\n    }\n    for (var i = 1; i <= len; i += 1) {\n      var current = (activeOptionIndex + i * offset + len) % len;\n      var option = currentOptions[current];\n      if (!option.disabled) {\n        return option;\n      }\n    }\n    return null;\n  };\n  var prevColumn = function prevColumn() {\n    if (mergedOpenPath.length <= 1) {\n      onToggleOpen(false);\n    }\n    setOpenFinalValue(mergedOpenPath[mergedOpenPath.length - 2]);\n  };\n  var nextColumn = function nextColumn() {\n    var nextColumnIndex = mergedOpenPath.length;\n    var nextActiveOption = getActiveOption(nextColumnIndex, 1);\n    if (nextActiveOption) {\n      onPathOpen(nextColumnIndex, nextActiveOption.value);\n    }\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n              if (offset !== 0) {\n                var activeColumnIndex = Math.max(mergedOpenPath.length - 1, 0);\n                var nextActiveOption = getActiveOption(activeColumnIndex, offset);\n                if (nextActiveOption) {\n                  var _containerRef$current, _ele$scrollIntoView;\n                  var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-value=\\\"\".concat(nextActiveOption.value, \"\\\"]\"));\n                  ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n                    block: 'nearest'\n                  });\n                  onPathOpen(activeColumnIndex, nextActiveOption.value);\n                }\n              }\n              break;\n            }\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n              break;\n            }\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n              break;\n            }\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              var _optionColumns, _optionColumns$option;\n              var lastValue = mergedOpenPath[mergedOpenPath.length - 1];\n              var option = (_optionColumns = optionColumns[mergedOpenPath.length - 1]) === null || _optionColumns === void 0 ? void 0 : (_optionColumns$option = _optionColumns.options) === null || _optionColumns$option === void 0 ? void 0 : _optionColumns$option.find(function (opt) {\n                return opt.value === lastValue;\n              }); // Skip when no select\n\n              if (option) {\n                var leaf = isLeaf(option);\n                if (multiple || changeOnSelect || leaf) {\n                  onPathSelect(lastValue, leaf);\n                } // Close for changeOnSelect\n\n                if (changeOnSelect) {\n                  onToggleOpen(false);\n                }\n              }\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    onOpen: onPathOpen,\n    onSelect: onPathSelect,\n    onToggleOpen: onToggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys\n  }); // >>>>> Empty\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) === null || _optionColumns$ === void 0 ? void 0 : (_optionColumns$$optio = _optionColumns$.options) === null || _optionColumns$$optio === void 0 ? void 0 : _optionColumns$$optio.length);\n  var emptyList = [{\n    title: notFoundContent,\n    value: '__EMPTY__',\n    disabled: true,\n    node: null\n  }]; // >>>>> Columns\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index,\n      index: index\n    }, columnProps, {\n      isEmpty: isEmpty,\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      openKey: mergedOpenPath[index]\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\nexport default RefOptionList;","map":{"version":3,"names":["_defineProperty","_extends","_objectSpread","_toConsumableArray","_slicedToArray","React","classNames","KeyCode","SelectContext","Column","isLeaf","restoreCompatibleValue","CascaderContext","useSearchResult","RefOptionList","forwardRef","props","ref","_optionColumns$","_optionColumns$$optio","_classNames","prefixCls","options","onSelect","multiple","open","flattenOptions","searchValue","onToggleOpen","notFoundContent","direction","containerRef","useRef","rtl","_React$useContext","useContext","checkedKeys","halfCheckedKeys","_React$useContext2","changeOnSelect","expandTrigger","fieldNames","loadData","search","dropdownPrefixCls","mergedPrefixCls","_React$useState","useState","_React$useState2","loadingKeys","setLoadingKeys","internalLoadData","pathValue","entity","find","flattenOption","data","value","node","_restoreCompatibleVal","optionList","rawOptionList","map","opt","keys","concat","key","useEffect","length","forEach","loadingKey","option","children","filter","checkedSet","useMemo","Set","halfCheckedSet","_React$useState3","_React$useState4","openFinalValue","setOpenFinalValue","mergedOpenPath","undefined","_restoreCompatibleVal2","path","nextOpenPath","onPathOpen","index","onPathSelect","leaf","selected","has","getPathList","pathList","currentOptions","_loop","i","searchOptions","searchConfig","optionColumns","rawOptionColumns","subOptions","slice","push","getActiveOption","activeColumnIndex","offset","_optionColumns$active","pathActiveValue","activeOptionIndex","findIndex","len","current","disabled","prevColumn","nextColumn","nextColumnIndex","nextActiveOption","useImperativeHandle","onKeyDown","event","which","UP","DOWN","Math","max","_containerRef$current","_ele$scrollIntoView","ele","querySelector","scrollIntoView","call","block","LEFT","RIGHT","BACKSPACE","ENTER","_optionColumns","_optionColumns$option","lastValue","ESC","stopPropagation","onKeyUp","columnProps","onOpen","isEmpty","emptyList","title","mergedOptionColumns","columnNodes","col","createElement","openKey","Fragment","className"],"sources":["F:/Great Learning FSD/React Js/graded-final/repo/node_modules/rc-cascader/es/OptionList/index.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable default-case */\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport { SelectContext } from \"rc-tree-select/es/Context\";\nimport Column from './Column';\nimport { isLeaf, restoreCompatibleValue } from '../util';\nimport CascaderContext from '../context';\nimport useSearchResult from '../hooks/useSearchResult';\nvar RefOptionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _optionColumns$, _optionColumns$$optio, _classNames;\n\n  var prefixCls = props.prefixCls,\n      options = props.options,\n      onSelect = props.onSelect,\n      multiple = props.multiple,\n      open = props.open,\n      flattenOptions = props.flattenOptions,\n      searchValue = props.searchValue,\n      onToggleOpen = props.onToggleOpen,\n      notFoundContent = props.notFoundContent,\n      direction = props.direction;\n  var containerRef = React.useRef();\n  var rtl = direction === 'rtl';\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys;\n\n  var _React$useContext2 = React.useContext(CascaderContext),\n      changeOnSelect = _React$useContext2.changeOnSelect,\n      expandTrigger = _React$useContext2.expandTrigger,\n      fieldNames = _React$useContext2.fieldNames,\n      loadData = _React$useContext2.loadData,\n      search = _React$useContext2.search,\n      dropdownPrefixCls = _React$useContext2.dropdownPrefixCls;\n\n  var mergedPrefixCls = dropdownPrefixCls || prefixCls; // ========================= loadData =========================\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadingKeys = _React$useState2[0],\n      setLoadingKeys = _React$useState2[1];\n\n  var internalLoadData = function internalLoadData(pathValue) {\n    // Do not load when search\n    if (!loadData || searchValue) {\n      return;\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === pathValue;\n    });\n\n    if (entity && !isLeaf(entity.data.node)) {\n      var _restoreCompatibleVal = restoreCompatibleValue(entity, fieldNames),\n          optionList = _restoreCompatibleVal.options;\n\n      var rawOptionList = optionList.map(function (opt) {\n        return opt.node;\n      });\n      setLoadingKeys(function (keys) {\n        return [].concat(_toConsumableArray(keys), [entity.key]);\n      });\n      loadData(rawOptionList);\n    }\n  }; // zombieJ: This is bad. We should make this same as `rc-tree` to use Promise instead.\n\n\n  React.useEffect(function () {\n    if (loadingKeys.length) {\n      loadingKeys.forEach(function (loadingKey) {\n        var option = flattenOptions.find(function (opt) {\n          return opt.value === loadingKey;\n        });\n\n        if (!option || option.data.children || option.data.isLeaf === true) {\n          setLoadingKeys(function (keys) {\n            return keys.filter(function (key) {\n              return key !== loadingKey;\n            });\n          });\n        }\n      });\n    }\n  }, [flattenOptions, loadingKeys]); // ========================== Values ==========================\n\n  var checkedSet = React.useMemo(function () {\n    return new Set(checkedKeys);\n  }, [checkedKeys]);\n  var halfCheckedSet = React.useMemo(function () {\n    return new Set(halfCheckedKeys);\n  }, [halfCheckedKeys]); // =========================== Open ===========================\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      openFinalValue = _React$useState4[0],\n      setOpenFinalValue = _React$useState4[1];\n\n  var mergedOpenPath = React.useMemo(function () {\n    if (searchValue) {\n      return openFinalValue !== undefined && openFinalValue !== null ? [openFinalValue] : [];\n    }\n\n    var entity = flattenOptions.find(function (flattenOption) {\n      return flattenOption.data.value === openFinalValue;\n    });\n\n    if (entity) {\n      var _restoreCompatibleVal2 = restoreCompatibleValue(entity, fieldNames),\n          path = _restoreCompatibleVal2.path;\n\n      return path;\n    }\n\n    return [];\n  }, [openFinalValue, flattenOptions, searchValue]);\n  React.useEffect(function () {\n    if (open) {\n      var nextOpenPath = null;\n\n      if (!multiple && checkedKeys.length) {\n        var entity = flattenOptions.find(function (flattenOption) {\n          return flattenOption.data.value === checkedKeys[0];\n        });\n\n        if (entity) {\n          nextOpenPath = entity.data.value;\n        }\n      }\n\n      setOpenFinalValue(nextOpenPath);\n    }\n  }, [open]); // =========================== Path ===========================\n\n  var onPathOpen = function onPathOpen(index, pathValue) {\n    setOpenFinalValue(pathValue); // Trigger loadData\n\n    internalLoadData(pathValue);\n  };\n\n  var onPathSelect = function onPathSelect(pathValue, leaf) {\n    onSelect(pathValue, {\n      selected: !checkedSet.has(pathValue)\n    });\n\n    if (!multiple && (leaf || changeOnSelect && expandTrigger === 'hover')) {\n      onToggleOpen(false);\n    }\n  };\n\n  var getPathList = function getPathList(pathList) {\n    var currentOptions = options;\n\n    var _loop = function _loop(i) {\n      currentOptions = (currentOptions || []).find(function (option) {\n        return option.value === pathList[i];\n      }).children;\n    };\n\n    for (var i = 0; i < pathList.length; i += 1) {\n      _loop(i);\n    }\n\n    return currentOptions;\n  }; // ========================== Search ==========================\n\n\n  var searchOptions = useSearchResult(_objectSpread(_objectSpread({}, props), {}, {\n    prefixCls: mergedPrefixCls,\n    fieldNames: fieldNames,\n    changeOnSelect: changeOnSelect,\n    searchConfig: search\n  })); // ========================== Column ==========================\n\n  var optionColumns = React.useMemo(function () {\n    if (searchValue) {\n      return [{\n        options: searchOptions\n      }];\n    }\n\n    var rawOptionColumns = [];\n\n    for (var i = 0; i <= mergedOpenPath.length; i += 1) {\n      var subOptions = getPathList(mergedOpenPath.slice(0, i));\n\n      if (subOptions) {\n        rawOptionColumns.push({\n          options: subOptions\n        });\n      } else {\n        break;\n      }\n    }\n\n    return rawOptionColumns;\n  }, [searchValue, searchOptions, mergedOpenPath]); // ========================= Keyboard =========================\n\n  var getActiveOption = function getActiveOption(activeColumnIndex, offset) {\n    var _optionColumns$active;\n\n    var pathActiveValue = mergedOpenPath[activeColumnIndex];\n    var currentOptions = ((_optionColumns$active = optionColumns[activeColumnIndex]) === null || _optionColumns$active === void 0 ? void 0 : _optionColumns$active.options) || [];\n    var activeOptionIndex = currentOptions.findIndex(function (opt) {\n      return opt.value === pathActiveValue;\n    });\n    var len = currentOptions.length; // Last one is special since -1 may back 2 offset\n\n    if (offset === -1 && activeOptionIndex === -1) {\n      activeOptionIndex = len;\n    }\n\n    for (var i = 1; i <= len; i += 1) {\n      var current = (activeOptionIndex + i * offset + len) % len;\n      var option = currentOptions[current];\n\n      if (!option.disabled) {\n        return option;\n      }\n    }\n\n    return null;\n  };\n\n  var prevColumn = function prevColumn() {\n    if (mergedOpenPath.length <= 1) {\n      onToggleOpen(false);\n    }\n\n    setOpenFinalValue(mergedOpenPath[mergedOpenPath.length - 2]);\n  };\n\n  var nextColumn = function nextColumn() {\n    var nextColumnIndex = mergedOpenPath.length;\n    var nextActiveOption = getActiveOption(nextColumnIndex, 1);\n\n    if (nextActiveOption) {\n      onPathOpen(nextColumnIndex, nextActiveOption.value);\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      // scrollTo: treeRef.current?.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n            {\n              var offset = 0;\n\n              if (which === KeyCode.UP) {\n                offset = -1;\n              } else if (which === KeyCode.DOWN) {\n                offset = 1;\n              }\n\n              if (offset !== 0) {\n                var activeColumnIndex = Math.max(mergedOpenPath.length - 1, 0);\n                var nextActiveOption = getActiveOption(activeColumnIndex, offset);\n\n                if (nextActiveOption) {\n                  var _containerRef$current, _ele$scrollIntoView;\n\n                  var ele = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.querySelector(\"li[data-value=\\\"\".concat(nextActiveOption.value, \"\\\"]\"));\n                  ele === null || ele === void 0 ? void 0 : (_ele$scrollIntoView = ele.scrollIntoView) === null || _ele$scrollIntoView === void 0 ? void 0 : _ele$scrollIntoView.call(ele, {\n                    block: 'nearest'\n                  });\n                  onPathOpen(activeColumnIndex, nextActiveOption.value);\n                }\n              }\n\n              break;\n            }\n\n          case KeyCode.LEFT:\n            {\n              if (rtl) {\n                nextColumn();\n              } else {\n                prevColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.RIGHT:\n            {\n              if (rtl) {\n                prevColumn();\n              } else {\n                nextColumn();\n              }\n\n              break;\n            }\n\n          case KeyCode.BACKSPACE:\n            {\n              if (!searchValue) {\n                prevColumn();\n              }\n\n              break;\n            }\n          // >>> Select\n\n          case KeyCode.ENTER:\n            {\n              var _optionColumns, _optionColumns$option;\n\n              var lastValue = mergedOpenPath[mergedOpenPath.length - 1];\n              var option = (_optionColumns = optionColumns[mergedOpenPath.length - 1]) === null || _optionColumns === void 0 ? void 0 : (_optionColumns$option = _optionColumns.options) === null || _optionColumns$option === void 0 ? void 0 : _optionColumns$option.find(function (opt) {\n                return opt.value === lastValue;\n              }); // Skip when no select\n\n              if (option) {\n                var leaf = isLeaf(option);\n\n                if (multiple || changeOnSelect || leaf) {\n                  onPathSelect(lastValue, leaf);\n                } // Close for changeOnSelect\n\n\n                if (changeOnSelect) {\n                  onToggleOpen(false);\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n\n              if (open) {\n                event.stopPropagation();\n              }\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  var columnProps = _objectSpread(_objectSpread({}, props), {}, {\n    onOpen: onPathOpen,\n    onSelect: onPathSelect,\n    onToggleOpen: onToggleOpen,\n    checkedSet: checkedSet,\n    halfCheckedSet: halfCheckedSet,\n    loadingKeys: loadingKeys\n  }); // >>>>> Empty\n\n\n  var isEmpty = !((_optionColumns$ = optionColumns[0]) === null || _optionColumns$ === void 0 ? void 0 : (_optionColumns$$optio = _optionColumns$.options) === null || _optionColumns$$optio === void 0 ? void 0 : _optionColumns$$optio.length);\n  var emptyList = [{\n    title: notFoundContent,\n    value: '__EMPTY__',\n    disabled: true,\n    node: null\n  }]; // >>>>> Columns\n\n  var mergedOptionColumns = isEmpty ? [{\n    options: emptyList\n  }] : optionColumns;\n  var columnNodes = mergedOptionColumns.map(function (col, index) {\n    return /*#__PURE__*/React.createElement(Column, _extends({\n      key: index,\n      index: index\n    }, columnProps, {\n      isEmpty: isEmpty,\n      prefixCls: mergedPrefixCls,\n      options: col.options,\n      openKey: mergedOpenPath[index]\n    }));\n  }); // >>>>> Render\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames(\"\".concat(mergedPrefixCls, \"-menus\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-menu-empty\"), isEmpty), _defineProperty(_classNames, \"\".concat(mergedPrefixCls, \"-rtl\"), rtl), _classNames)),\n    ref: containerRef\n  }, columnNodes));\n});\nexport default RefOptionList;"],"mappings":"AAAA,OAAOA,eAAe,MAAM,2CAA2C;AACvE,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,aAAa,MAAM,0CAA0C;AACpE,OAAOC,kBAAkB,MAAM,8CAA8C;AAC7E,OAAOC,cAAc,MAAM,0CAA0C;;AAErE;AACA,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,SAASC,aAAa,QAAQ,2BAA2B;AACzD,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,MAAM,EAAEC,sBAAsB,QAAQ,SAAS;AACxD,OAAOC,eAAe,MAAM,YAAY;AACxC,OAAOC,eAAe,MAAM,0BAA0B;AACtD,IAAIC,aAAa,GAAG,aAAaT,KAAK,CAACU,UAAU,CAAC,UAAUC,KAAK,EAAEC,GAAG,EAAE;EACtE,IAAIC,eAAe,EAAEC,qBAAqB,EAAEC,WAAW;EAEvD,IAAIC,SAAS,GAAGL,KAAK,CAACK,SAAS;IAC3BC,OAAO,GAAGN,KAAK,CAACM,OAAO;IACvBC,QAAQ,GAAGP,KAAK,CAACO,QAAQ;IACzBC,QAAQ,GAAGR,KAAK,CAACQ,QAAQ;IACzBC,IAAI,GAAGT,KAAK,CAACS,IAAI;IACjBC,cAAc,GAAGV,KAAK,CAACU,cAAc;IACrCC,WAAW,GAAGX,KAAK,CAACW,WAAW;IAC/BC,YAAY,GAAGZ,KAAK,CAACY,YAAY;IACjCC,eAAe,GAAGb,KAAK,CAACa,eAAe;IACvCC,SAAS,GAAGd,KAAK,CAACc,SAAS;EAC/B,IAAIC,YAAY,GAAG1B,KAAK,CAAC2B,MAAM,EAAE;EACjC,IAAIC,GAAG,GAAGH,SAAS,KAAK,KAAK;EAE7B,IAAII,iBAAiB,GAAG7B,KAAK,CAAC8B,UAAU,CAAC3B,aAAa,CAAC;IACnD4B,WAAW,GAAGF,iBAAiB,CAACE,WAAW;IAC3CC,eAAe,GAAGH,iBAAiB,CAACG,eAAe;EAEvD,IAAIC,kBAAkB,GAAGjC,KAAK,CAAC8B,UAAU,CAACvB,eAAe,CAAC;IACtD2B,cAAc,GAAGD,kBAAkB,CAACC,cAAc;IAClDC,aAAa,GAAGF,kBAAkB,CAACE,aAAa;IAChDC,UAAU,GAAGH,kBAAkB,CAACG,UAAU;IAC1CC,QAAQ,GAAGJ,kBAAkB,CAACI,QAAQ;IACtCC,MAAM,GAAGL,kBAAkB,CAACK,MAAM;IAClCC,iBAAiB,GAAGN,kBAAkB,CAACM,iBAAiB;EAE5D,IAAIC,eAAe,GAAGD,iBAAiB,IAAIvB,SAAS,CAAC,CAAC;;EAEtD,IAAIyB,eAAe,GAAGzC,KAAK,CAAC0C,QAAQ,CAAC,EAAE,CAAC;IACpCC,gBAAgB,GAAG5C,cAAc,CAAC0C,eAAe,EAAE,CAAC,CAAC;IACrDG,WAAW,GAAGD,gBAAgB,CAAC,CAAC,CAAC;IACjCE,cAAc,GAAGF,gBAAgB,CAAC,CAAC,CAAC;EAExC,IAAIG,gBAAgB,GAAG,SAASA,gBAAgB,CAACC,SAAS,EAAE;IAC1D;IACA,IAAI,CAACV,QAAQ,IAAIf,WAAW,EAAE;MAC5B;IACF;IAEA,IAAI0B,MAAM,GAAG3B,cAAc,CAAC4B,IAAI,CAAC,UAAUC,aAAa,EAAE;MACxD,OAAOA,aAAa,CAACC,IAAI,CAACC,KAAK,KAAKL,SAAS;IAC/C,CAAC,CAAC;IAEF,IAAIC,MAAM,IAAI,CAAC3C,MAAM,CAAC2C,MAAM,CAACG,IAAI,CAACE,IAAI,CAAC,EAAE;MACvC,IAAIC,qBAAqB,GAAGhD,sBAAsB,CAAC0C,MAAM,EAAEZ,UAAU,CAAC;QAClEmB,UAAU,GAAGD,qBAAqB,CAACrC,OAAO;MAE9C,IAAIuC,aAAa,GAAGD,UAAU,CAACE,GAAG,CAAC,UAAUC,GAAG,EAAE;QAChD,OAAOA,GAAG,CAACL,IAAI;MACjB,CAAC,CAAC;MACFR,cAAc,CAAC,UAAUc,IAAI,EAAE;QAC7B,OAAO,EAAE,CAACC,MAAM,CAAC9D,kBAAkB,CAAC6D,IAAI,CAAC,EAAE,CAACX,MAAM,CAACa,GAAG,CAAC,CAAC;MAC1D,CAAC,CAAC;MACFxB,QAAQ,CAACmB,aAAa,CAAC;IACzB;EACF,CAAC,CAAC,CAAC;;EAGHxD,KAAK,CAAC8D,SAAS,CAAC,YAAY;IAC1B,IAAIlB,WAAW,CAACmB,MAAM,EAAE;MACtBnB,WAAW,CAACoB,OAAO,CAAC,UAAUC,UAAU,EAAE;QACxC,IAAIC,MAAM,GAAG7C,cAAc,CAAC4B,IAAI,CAAC,UAAUS,GAAG,EAAE;UAC9C,OAAOA,GAAG,CAACN,KAAK,KAAKa,UAAU;QACjC,CAAC,CAAC;QAEF,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACf,IAAI,CAACgB,QAAQ,IAAID,MAAM,CAACf,IAAI,CAAC9C,MAAM,KAAK,IAAI,EAAE;UAClEwC,cAAc,CAAC,UAAUc,IAAI,EAAE;YAC7B,OAAOA,IAAI,CAACS,MAAM,CAAC,UAAUP,GAAG,EAAE;cAChC,OAAOA,GAAG,KAAKI,UAAU;YAC3B,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC5C,cAAc,EAAEuB,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnC,IAAIyB,UAAU,GAAGrE,KAAK,CAACsE,OAAO,CAAC,YAAY;IACzC,OAAO,IAAIC,GAAG,CAACxC,WAAW,CAAC;EAC7B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EACjB,IAAIyC,cAAc,GAAGxE,KAAK,CAACsE,OAAO,CAAC,YAAY;IAC7C,OAAO,IAAIC,GAAG,CAACvC,eAAe,CAAC;EACjC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC,CAAC,CAAC;;EAEvB,IAAIyC,gBAAgB,GAAGzE,KAAK,CAAC0C,QAAQ,CAAC,IAAI,CAAC;IACvCgC,gBAAgB,GAAG3E,cAAc,CAAC0E,gBAAgB,EAAE,CAAC,CAAC;IACtDE,cAAc,GAAGD,gBAAgB,CAAC,CAAC,CAAC;IACpCE,iBAAiB,GAAGF,gBAAgB,CAAC,CAAC,CAAC;EAE3C,IAAIG,cAAc,GAAG7E,KAAK,CAACsE,OAAO,CAAC,YAAY;IAC7C,IAAIhD,WAAW,EAAE;MACf,OAAOqD,cAAc,KAAKG,SAAS,IAAIH,cAAc,KAAK,IAAI,GAAG,CAACA,cAAc,CAAC,GAAG,EAAE;IACxF;IAEA,IAAI3B,MAAM,GAAG3B,cAAc,CAAC4B,IAAI,CAAC,UAAUC,aAAa,EAAE;MACxD,OAAOA,aAAa,CAACC,IAAI,CAACC,KAAK,KAAKuB,cAAc;IACpD,CAAC,CAAC;IAEF,IAAI3B,MAAM,EAAE;MACV,IAAI+B,sBAAsB,GAAGzE,sBAAsB,CAAC0C,MAAM,EAAEZ,UAAU,CAAC;QACnE4C,IAAI,GAAGD,sBAAsB,CAACC,IAAI;MAEtC,OAAOA,IAAI;IACb;IAEA,OAAO,EAAE;EACX,CAAC,EAAE,CAACL,cAAc,EAAEtD,cAAc,EAAEC,WAAW,CAAC,CAAC;EACjDtB,KAAK,CAAC8D,SAAS,CAAC,YAAY;IAC1B,IAAI1C,IAAI,EAAE;MACR,IAAI6D,YAAY,GAAG,IAAI;MAEvB,IAAI,CAAC9D,QAAQ,IAAIY,WAAW,CAACgC,MAAM,EAAE;QACnC,IAAIf,MAAM,GAAG3B,cAAc,CAAC4B,IAAI,CAAC,UAAUC,aAAa,EAAE;UACxD,OAAOA,aAAa,CAACC,IAAI,CAACC,KAAK,KAAKrB,WAAW,CAAC,CAAC,CAAC;QACpD,CAAC,CAAC;QAEF,IAAIiB,MAAM,EAAE;UACViC,YAAY,GAAGjC,MAAM,CAACG,IAAI,CAACC,KAAK;QAClC;MACF;MAEAwB,iBAAiB,CAACK,YAAY,CAAC;IACjC;EACF,CAAC,EAAE,CAAC7D,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,IAAI8D,UAAU,GAAG,SAASA,UAAU,CAACC,KAAK,EAAEpC,SAAS,EAAE;IACrD6B,iBAAiB,CAAC7B,SAAS,CAAC,CAAC,CAAC;;IAE9BD,gBAAgB,CAACC,SAAS,CAAC;EAC7B,CAAC;EAED,IAAIqC,YAAY,GAAG,SAASA,YAAY,CAACrC,SAAS,EAAEsC,IAAI,EAAE;IACxDnE,QAAQ,CAAC6B,SAAS,EAAE;MAClBuC,QAAQ,EAAE,CAACjB,UAAU,CAACkB,GAAG,CAACxC,SAAS;IACrC,CAAC,CAAC;IAEF,IAAI,CAAC5B,QAAQ,KAAKkE,IAAI,IAAInD,cAAc,IAAIC,aAAa,KAAK,OAAO,CAAC,EAAE;MACtEZ,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,IAAIiE,WAAW,GAAG,SAASA,WAAW,CAACC,QAAQ,EAAE;IAC/C,IAAIC,cAAc,GAAGzE,OAAO;IAE5B,IAAI0E,KAAK,GAAG,SAASA,KAAK,CAACC,CAAC,EAAE;MAC5BF,cAAc,GAAG,CAACA,cAAc,IAAI,EAAE,EAAEzC,IAAI,CAAC,UAAUiB,MAAM,EAAE;QAC7D,OAAOA,MAAM,CAACd,KAAK,KAAKqC,QAAQ,CAACG,CAAC,CAAC;MACrC,CAAC,CAAC,CAACzB,QAAQ;IACb,CAAC;IAED,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAAC1B,MAAM,EAAE6B,CAAC,IAAI,CAAC,EAAE;MAC3CD,KAAK,CAACC,CAAC,CAAC;IACV;IAEA,OAAOF,cAAc;EACvB,CAAC,CAAC,CAAC;;EAGH,IAAIG,aAAa,GAAGrF,eAAe,CAACX,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEc,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE;IAC9EK,SAAS,EAAEwB,eAAe;IAC1BJ,UAAU,EAAEA,UAAU;IACtBF,cAAc,EAAEA,cAAc;IAC9B4D,YAAY,EAAExD;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEL,IAAIyD,aAAa,GAAG/F,KAAK,CAACsE,OAAO,CAAC,YAAY;IAC5C,IAAIhD,WAAW,EAAE;MACf,OAAO,CAAC;QACNL,OAAO,EAAE4E;MACX,CAAC,CAAC;IACJ;IAEA,IAAIG,gBAAgB,GAAG,EAAE;IAEzB,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIf,cAAc,CAACd,MAAM,EAAE6B,CAAC,IAAI,CAAC,EAAE;MAClD,IAAIK,UAAU,GAAGT,WAAW,CAACX,cAAc,CAACqB,KAAK,CAAC,CAAC,EAAEN,CAAC,CAAC,CAAC;MAExD,IAAIK,UAAU,EAAE;QACdD,gBAAgB,CAACG,IAAI,CAAC;UACpBlF,OAAO,EAAEgF;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;MACF;IACF;IAEA,OAAOD,gBAAgB;EACzB,CAAC,EAAE,CAAC1E,WAAW,EAAEuE,aAAa,EAAEhB,cAAc,CAAC,CAAC,CAAC,CAAC;;EAElD,IAAIuB,eAAe,GAAG,SAASA,eAAe,CAACC,iBAAiB,EAAEC,MAAM,EAAE;IACxE,IAAIC,qBAAqB;IAEzB,IAAIC,eAAe,GAAG3B,cAAc,CAACwB,iBAAiB,CAAC;IACvD,IAAIX,cAAc,GAAG,CAAC,CAACa,qBAAqB,GAAGR,aAAa,CAACM,iBAAiB,CAAC,MAAM,IAAI,IAAIE,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACtF,OAAO,KAAK,EAAE;IAC7K,IAAIwF,iBAAiB,GAAGf,cAAc,CAACgB,SAAS,CAAC,UAAUhD,GAAG,EAAE;MAC9D,OAAOA,GAAG,CAACN,KAAK,KAAKoD,eAAe;IACtC,CAAC,CAAC;IACF,IAAIG,GAAG,GAAGjB,cAAc,CAAC3B,MAAM,CAAC,CAAC;;IAEjC,IAAIuC,MAAM,KAAK,CAAC,CAAC,IAAIG,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC7CA,iBAAiB,GAAGE,GAAG;IACzB;IAEA,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIe,GAAG,EAAEf,CAAC,IAAI,CAAC,EAAE;MAChC,IAAIgB,OAAO,GAAG,CAACH,iBAAiB,GAAGb,CAAC,GAAGU,MAAM,GAAGK,GAAG,IAAIA,GAAG;MAC1D,IAAIzC,MAAM,GAAGwB,cAAc,CAACkB,OAAO,CAAC;MAEpC,IAAI,CAAC1C,MAAM,CAAC2C,QAAQ,EAAE;QACpB,OAAO3C,MAAM;MACf;IACF;IAEA,OAAO,IAAI;EACb,CAAC;EAED,IAAI4C,UAAU,GAAG,SAASA,UAAU,GAAG;IACrC,IAAIjC,cAAc,CAACd,MAAM,IAAI,CAAC,EAAE;MAC9BxC,YAAY,CAAC,KAAK,CAAC;IACrB;IAEAqD,iBAAiB,CAACC,cAAc,CAACA,cAAc,CAACd,MAAM,GAAG,CAAC,CAAC,CAAC;EAC9D,CAAC;EAED,IAAIgD,UAAU,GAAG,SAASA,UAAU,GAAG;IACrC,IAAIC,eAAe,GAAGnC,cAAc,CAACd,MAAM;IAC3C,IAAIkD,gBAAgB,GAAGb,eAAe,CAACY,eAAe,EAAE,CAAC,CAAC;IAE1D,IAAIC,gBAAgB,EAAE;MACpB/B,UAAU,CAAC8B,eAAe,EAAEC,gBAAgB,CAAC7D,KAAK,CAAC;IACrD;EACF,CAAC;EAEDpD,KAAK,CAACkH,mBAAmB,CAACtG,GAAG,EAAE,YAAY;IACzC,OAAO;MACL;MACAuG,SAAS,EAAE,SAASA,SAAS,CAACC,KAAK,EAAE;QACnC,IAAIC,KAAK,GAAGD,KAAK,CAACC,KAAK;QAEvB,QAAQA,KAAK;UACX;UACA,KAAKnH,OAAO,CAACoH,EAAE;UACf,KAAKpH,OAAO,CAACqH,IAAI;YACf;cACE,IAAIjB,MAAM,GAAG,CAAC;cAEd,IAAIe,KAAK,KAAKnH,OAAO,CAACoH,EAAE,EAAE;gBACxBhB,MAAM,GAAG,CAAC,CAAC;cACb,CAAC,MAAM,IAAIe,KAAK,KAAKnH,OAAO,CAACqH,IAAI,EAAE;gBACjCjB,MAAM,GAAG,CAAC;cACZ;cAEA,IAAIA,MAAM,KAAK,CAAC,EAAE;gBAChB,IAAID,iBAAiB,GAAGmB,IAAI,CAACC,GAAG,CAAC5C,cAAc,CAACd,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC9D,IAAIkD,gBAAgB,GAAGb,eAAe,CAACC,iBAAiB,EAAEC,MAAM,CAAC;gBAEjE,IAAIW,gBAAgB,EAAE;kBACpB,IAAIS,qBAAqB,EAAEC,mBAAmB;kBAE9C,IAAIC,GAAG,GAAG,CAACF,qBAAqB,GAAGhG,YAAY,CAACkF,OAAO,MAAM,IAAI,IAAIc,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACG,aAAa,CAAC,kBAAkB,CAACjE,MAAM,CAACqD,gBAAgB,CAAC7D,KAAK,EAAE,KAAK,CAAC,CAAC;kBAC9MwE,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACD,mBAAmB,GAAGC,GAAG,CAACE,cAAc,MAAM,IAAI,IAAIH,mBAAmB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACI,IAAI,CAACH,GAAG,EAAE;oBACvKI,KAAK,EAAE;kBACT,CAAC,CAAC;kBACF9C,UAAU,CAACmB,iBAAiB,EAAEY,gBAAgB,CAAC7D,KAAK,CAAC;gBACvD;cACF;cAEA;YACF;UAEF,KAAKlD,OAAO,CAAC+H,IAAI;YACf;cACE,IAAIrG,GAAG,EAAE;gBACPmF,UAAU,EAAE;cACd,CAAC,MAAM;gBACLD,UAAU,EAAE;cACd;cAEA;YACF;UAEF,KAAK5G,OAAO,CAACgI,KAAK;YAChB;cACE,IAAItG,GAAG,EAAE;gBACPkF,UAAU,EAAE;cACd,CAAC,MAAM;gBACLC,UAAU,EAAE;cACd;cAEA;YACF;UAEF,KAAK7G,OAAO,CAACiI,SAAS;YACpB;cACE,IAAI,CAAC7G,WAAW,EAAE;gBAChBwF,UAAU,EAAE;cACd;cAEA;YACF;UACF;;UAEA,KAAK5G,OAAO,CAACkI,KAAK;YAChB;cACE,IAAIC,cAAc,EAAEC,qBAAqB;cAEzC,IAAIC,SAAS,GAAG1D,cAAc,CAACA,cAAc,CAACd,MAAM,GAAG,CAAC,CAAC;cACzD,IAAIG,MAAM,GAAG,CAACmE,cAAc,GAAGtC,aAAa,CAAClB,cAAc,CAACd,MAAM,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIsE,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,qBAAqB,GAAGD,cAAc,CAACpH,OAAO,MAAM,IAAI,IAAIqH,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACrF,IAAI,CAAC,UAAUS,GAAG,EAAE;gBAC3Q,OAAOA,GAAG,CAACN,KAAK,KAAKmF,SAAS;cAChC,CAAC,CAAC,CAAC,CAAC;;cAEJ,IAAIrE,MAAM,EAAE;gBACV,IAAImB,IAAI,GAAGhF,MAAM,CAAC6D,MAAM,CAAC;gBAEzB,IAAI/C,QAAQ,IAAIe,cAAc,IAAImD,IAAI,EAAE;kBACtCD,YAAY,CAACmD,SAAS,EAAElD,IAAI,CAAC;gBAC/B,CAAC,CAAC;;gBAGF,IAAInD,cAAc,EAAE;kBAClBX,YAAY,CAAC,KAAK,CAAC;gBACrB;cACF;cAEA;YACF;UACF;;UAEA,KAAKrB,OAAO,CAACsI,GAAG;YACd;cACEjH,YAAY,CAAC,KAAK,CAAC;cAEnB,IAAIH,IAAI,EAAE;gBACRgG,KAAK,CAACqB,eAAe,EAAE;cACzB;YACF;QAAC;MAEP,CAAC;MACDC,OAAO,EAAE,SAASA,OAAO,GAAG,CAAC;IAC/B,CAAC;EACH,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAIC,WAAW,GAAG9I,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEc,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE;IAC5DiI,MAAM,EAAE1D,UAAU;IAClBhE,QAAQ,EAAEkE,YAAY;IACtB7D,YAAY,EAAEA,YAAY;IAC1B8C,UAAU,EAAEA,UAAU;IACtBG,cAAc,EAAEA,cAAc;IAC9B5B,WAAW,EAAEA;EACf,CAAC,CAAC,CAAC,CAAC;;EAGJ,IAAIiG,OAAO,GAAG,EAAE,CAAChI,eAAe,GAAGkF,aAAa,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIlF,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACC,qBAAqB,GAAGD,eAAe,CAACI,OAAO,MAAM,IAAI,IAAIH,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACiD,MAAM,CAAC;EAC9O,IAAI+E,SAAS,GAAG,CAAC;IACfC,KAAK,EAAEvH,eAAe;IACtB4B,KAAK,EAAE,WAAW;IAClByD,QAAQ,EAAE,IAAI;IACdxD,IAAI,EAAE;EACR,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI2F,mBAAmB,GAAGH,OAAO,GAAG,CAAC;IACnC5H,OAAO,EAAE6H;EACX,CAAC,CAAC,GAAG/C,aAAa;EAClB,IAAIkD,WAAW,GAAGD,mBAAmB,CAACvF,GAAG,CAAC,UAAUyF,GAAG,EAAE/D,KAAK,EAAE;IAC9D,OAAO,aAAanF,KAAK,CAACmJ,aAAa,CAAC/I,MAAM,EAAER,QAAQ,CAAC;MACvDiE,GAAG,EAAEsB,KAAK;MACVA,KAAK,EAAEA;IACT,CAAC,EAAEwD,WAAW,EAAE;MACdE,OAAO,EAAEA,OAAO;MAChB7H,SAAS,EAAEwB,eAAe;MAC1BvB,OAAO,EAAEiI,GAAG,CAACjI,OAAO;MACpBmI,OAAO,EAAEvE,cAAc,CAACM,KAAK;IAC/B,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,CAAC,CAAC;;EAEJ,OAAO,aAAanF,KAAK,CAACmJ,aAAa,CAACnJ,KAAK,CAACqJ,QAAQ,EAAE,IAAI,EAAE,aAAarJ,KAAK,CAACmJ,aAAa,CAAC,KAAK,EAAE;IACpGG,SAAS,EAAErJ,UAAU,CAAC,EAAE,CAAC2D,MAAM,CAACpB,eAAe,EAAE,QAAQ,CAAC,GAAGzB,WAAW,GAAG,CAAC,CAAC,EAAEpB,eAAe,CAACoB,WAAW,EAAE,EAAE,CAAC6C,MAAM,CAACpB,eAAe,EAAE,aAAa,CAAC,EAAEqG,OAAO,CAAC,EAAElJ,eAAe,CAACoB,WAAW,EAAE,EAAE,CAAC6C,MAAM,CAACpB,eAAe,EAAE,MAAM,CAAC,EAAEZ,GAAG,CAAC,EAAEb,WAAW,EAAE;IACrPH,GAAG,EAAEc;EACP,CAAC,EAAEuH,WAAW,CAAC,CAAC;AAClB,CAAC,CAAC;AACF,eAAexI,aAAa"},"metadata":{},"sourceType":"module"}