{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"key\", \"children\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { convertChildrenToData } from '../utils/legacyUtil';\nvar MAX_WARNING_TIMES = 10;\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\nfunction formatTreeData(treeData, getLabelProp, fieldNames) {\n  var warningTimes = 0;\n  var valueSet = new Set(); // Field names\n\n  var fieldValue = fieldNames.value,\n    fieldChildren = fieldNames.children;\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n        children = node.children,\n        restProps = _objectWithoutProperties(node, _excluded);\n      var value = node[fieldValue];\n      var mergedValue = fieldValue in node ? value : key;\n      var dataNode = _objectSpread(_objectSpread({}, restProps), {}, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node),\n        node: node\n      }); // Check `key` & `value` and warning user\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n        warning(value !== undefined || key !== undefined, 'TreeNode `value` is invalidate: undefined');\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n      if (node[fieldChildren] !== undefined) {\n        dataNode.children = dig(node[fieldChildren]);\n      }\n      return dataNode;\n    });\n  }\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\nexport default function useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n    simpleMode = _ref2.simpleMode,\n    fieldNames = _ref2.fieldNames;\n  var cacheRef = React.useRef({});\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp, fieldNames);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp, fieldNames);\n  }\n  return cacheRef.current.formatTreeData;\n}","map":{"version":3,"names":["_objectWithoutProperties","_objectSpread","_excluded","React","warning","convertChildrenToData","MAX_WARNING_TIMES","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","key","forEach","parentKey","parent","children","push","formatTreeData","getLabelProp","fieldNames","warningTimes","valueSet","Set","fieldValue","value","fieldChildren","dig","dataNodes","restProps","mergedValue","dataNode","undefined","title","process","env","NODE_ENV","String","concat","has","add","useTreeData","_ref2","simpleMode","cacheRef","useRef","current"],"sources":["F:/Great Learning FSD/React Js/graded-final/repo/node_modules/rc-tree-select/es/hooks/useTreeData.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"key\", \"children\"];\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { convertChildrenToData } from '../utils/legacyUtil';\nvar MAX_WARNING_TIMES = 10;\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\n\nfunction formatTreeData(treeData, getLabelProp, fieldNames) {\n  var warningTimes = 0;\n  var valueSet = new Set(); // Field names\n\n  var fieldValue = fieldNames.value,\n      fieldChildren = fieldNames.children;\n\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n          children = node.children,\n          restProps = _objectWithoutProperties(node, _excluded);\n\n      var value = node[fieldValue];\n      var mergedValue = fieldValue in node ? value : key;\n\n      var dataNode = _objectSpread(_objectSpread({}, restProps), {}, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node),\n        node: node\n      }); // Check `key` & `value` and warning user\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n\n        warning(value !== undefined || key !== undefined, 'TreeNode `value` is invalidate: undefined');\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n\n      if (node[fieldChildren] !== undefined) {\n        dataNode.children = dig(node[fieldChildren]);\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n      simpleMode = _ref2.simpleMode,\n      fieldNames = _ref2.fieldNames;\n  var cacheRef = React.useRef({});\n\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp, fieldNames);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp, fieldNames);\n  }\n\n  return cacheRef.current.formatTreeData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}