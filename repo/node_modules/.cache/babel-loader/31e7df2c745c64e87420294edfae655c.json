{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { fillFieldNames } from \"rc-tree-select/es/utils/valueUtil\";\nvar VALUE_SPLIT = '__RC_CASCADER_SPLIT__';\nexport { fillFieldNames };\n/**\n * Convert entity back to path & options\n * @returns\n */\n\nexport function restoreCompatibleValue(entity, fieldNames) {\n  var path = [];\n  var options = [];\n  var current = entity;\n  while (current) {\n    path.unshift(current.data.node[fieldNames.value]);\n    options.unshift(current.data.node);\n    current = current.parent;\n  }\n  return {\n    path: path,\n    options: options\n  };\n}\nexport function isLeaf(option) {\n  var children = option.children,\n    node = option.node;\n  var leaf = node === null || node === void 0 ? void 0 : node.isLeaf;\n  return leaf !== undefined ? leaf : !(children === null || children === void 0 ? void 0 : children.length);\n}\n/**\n * We will connect path value to a string. e.g.\n * ['little', 'bamboo'] => 'little__bamboo'\n *\n * zombieJ: It's better to deprecate the same key in the nest tree. Maybe next major version.\n */\n\nexport function connectValue(value) {\n  return (value || []).join(VALUE_SPLIT);\n}\n/**\n * Reverse of `connectValue`\n */\n\nexport function splitValue(str) {\n  return str.split(VALUE_SPLIT);\n}\n/**\n * Fill options with fully value by path to avoid nest entity with same value.\n * Which means we need another round to get origin node back!\n * This is slow perf on large list. We should abandon same value in nest in future.\n */\n\nexport function convertOptions(options, _ref, internalValueField) {\n  var fieldValue = _ref.value,\n    fieldChildren = _ref.children;\n  function injectValue(list) {\n    var parentValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return (list || []).map(function (option) {\n      var _objectSpread2;\n      var newValue = option[fieldValue];\n      if (parentValue) {\n        newValue = connectValue([parentValue, option[fieldValue]]);\n      } else if (typeof newValue === 'number') {\n        // Since we will convert all the value to string, we need get this\n        newValue = String(newValue);\n      }\n      var cloneOption = _objectSpread(_objectSpread({}, option), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, internalValueField, newValue), _defineProperty(_objectSpread2, \"node\", option), _objectSpread2));\n      if (cloneOption[fieldChildren]) {\n        cloneOption[fieldChildren] = injectValue(cloneOption[fieldChildren], newValue);\n      }\n      return cloneOption;\n    });\n  }\n  return injectValue(options);\n}","map":{"version":3,"names":["_defineProperty","_objectSpread","fillFieldNames","VALUE_SPLIT","restoreCompatibleValue","entity","fieldNames","path","options","current","unshift","data","node","value","parent","isLeaf","option","children","leaf","undefined","length","connectValue","join","splitValue","str","split","convertOptions","_ref","internalValueField","fieldValue","fieldChildren","injectValue","list","parentValue","arguments","map","_objectSpread2","newValue","String","cloneOption"],"sources":["F:/Great Learning FSD/React Js/graded-final/repo/node_modules/rc-cascader/es/util.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { fillFieldNames } from \"rc-tree-select/es/utils/valueUtil\";\nvar VALUE_SPLIT = '__RC_CASCADER_SPLIT__';\nexport { fillFieldNames };\n/**\n * Convert entity back to path & options\n * @returns\n */\n\nexport function restoreCompatibleValue(entity, fieldNames) {\n  var path = [];\n  var options = [];\n  var current = entity;\n\n  while (current) {\n    path.unshift(current.data.node[fieldNames.value]);\n    options.unshift(current.data.node);\n    current = current.parent;\n  }\n\n  return {\n    path: path,\n    options: options\n  };\n}\nexport function isLeaf(option) {\n  var children = option.children,\n      node = option.node;\n  var leaf = node === null || node === void 0 ? void 0 : node.isLeaf;\n  return leaf !== undefined ? leaf : !(children === null || children === void 0 ? void 0 : children.length);\n}\n/**\n * We will connect path value to a string. e.g.\n * ['little', 'bamboo'] => 'little__bamboo'\n *\n * zombieJ: It's better to deprecate the same key in the nest tree. Maybe next major version.\n */\n\nexport function connectValue(value) {\n  return (value || []).join(VALUE_SPLIT);\n}\n/**\n * Reverse of `connectValue`\n */\n\nexport function splitValue(str) {\n  return str.split(VALUE_SPLIT);\n}\n/**\n * Fill options with fully value by path to avoid nest entity with same value.\n * Which means we need another round to get origin node back!\n * This is slow perf on large list. We should abandon same value in nest in future.\n */\n\nexport function convertOptions(options, _ref, internalValueField) {\n  var fieldValue = _ref.value,\n      fieldChildren = _ref.children;\n\n  function injectValue(list) {\n    var parentValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return (list || []).map(function (option) {\n      var _objectSpread2;\n\n      var newValue = option[fieldValue];\n\n      if (parentValue) {\n        newValue = connectValue([parentValue, option[fieldValue]]);\n      } else if (typeof newValue === 'number') {\n        // Since we will convert all the value to string, we need get this\n        newValue = String(newValue);\n      }\n\n      var cloneOption = _objectSpread(_objectSpread({}, option), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, internalValueField, newValue), _defineProperty(_objectSpread2, \"node\", option), _objectSpread2));\n\n      if (cloneOption[fieldChildren]) {\n        cloneOption[fieldChildren] = injectValue(cloneOption[fieldChildren], newValue);\n      }\n\n      return cloneOption;\n    });\n  }\n\n  return injectValue(options);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}